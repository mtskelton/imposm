// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internal.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "internal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace imposm {
namespace cache {
namespace internal {

namespace {

const ::google::protobuf::Descriptor* DeltaCoords_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeltaCoords_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeltaList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeltaList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_internal_2eproto() {
  protobuf_AddDesc_internal_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "internal.proto");
  GOOGLE_CHECK(file != NULL);
  DeltaCoords_descriptor_ = file->message_type(0);
  static const int DeltaCoords_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaCoords, ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaCoords, lats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaCoords, lons_),
  };
  DeltaCoords_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeltaCoords_descriptor_,
      DeltaCoords::default_instance_,
      DeltaCoords_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaCoords, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaCoords, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeltaCoords));
  DeltaList_descriptor_ = file->message_type(1);
  static const int DeltaList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaList, ids_),
  };
  DeltaList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeltaList_descriptor_,
      DeltaList::default_instance_,
      DeltaList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeltaList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_internal_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeltaCoords_descriptor_, &DeltaCoords::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeltaList_descriptor_, &DeltaList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_internal_2eproto() {
  delete DeltaCoords::default_instance_;
  delete DeltaCoords_reflection_;
  delete DeltaList::default_instance_;
  delete DeltaList_reflection_;
}

void protobuf_AddDesc_internal_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016internal.proto\022\025imposm.cache.internal\""
    "B\n\013DeltaCoords\022\017\n\003ids\030\001 \003(\022B\002\020\001\022\020\n\004lats\030"
    "\002 \003(\022B\002\020\001\022\020\n\004lons\030\003 \003(\022B\002\020\001\"\034\n\tDeltaList"
    "\022\017\n\003ids\030\001 \003(\022B\002\020\001", 137);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "internal.proto", &protobuf_RegisterTypes);
  DeltaCoords::default_instance_ = new DeltaCoords();
  DeltaList::default_instance_ = new DeltaList();
  DeltaCoords::default_instance_->InitAsDefaultInstance();
  DeltaList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_internal_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_internal_2eproto {
  StaticDescriptorInitializer_internal_2eproto() {
    protobuf_AddDesc_internal_2eproto();
  }
} static_descriptor_initializer_internal_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DeltaCoords::kIdsFieldNumber;
const int DeltaCoords::kLatsFieldNumber;
const int DeltaCoords::kLonsFieldNumber;
#endif  // !_MSC_VER

DeltaCoords::DeltaCoords()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeltaCoords::InitAsDefaultInstance() {
}

DeltaCoords::DeltaCoords(const DeltaCoords& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeltaCoords::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeltaCoords::~DeltaCoords() {
  SharedDtor();
}

void DeltaCoords::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeltaCoords::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeltaCoords::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeltaCoords_descriptor_;
}

const DeltaCoords& DeltaCoords::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_internal_2eproto();
  return *default_instance_;
}

DeltaCoords* DeltaCoords::default_instance_ = NULL;

DeltaCoords* DeltaCoords::New() const {
  return new DeltaCoords;
}

void DeltaCoords::Clear() {
  ids_.Clear();
  lats_.Clear();
  lons_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeltaCoords::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated sint64 ids = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 10, input, this->mutable_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lats;
        break;
      }

      // repeated sint64 lats = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_lats())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 18, input, this->mutable_lats())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_lons;
        break;
      }

      // repeated sint64 lons = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lons:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_lons())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 26, input, this->mutable_lons())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeltaCoords::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated sint64 ids = 1 [packed = true];
  if (this->ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64NoTag(
      this->ids(i), output);
  }

  // repeated sint64 lats = 2 [packed = true];
  if (this->lats_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_lats_cached_byte_size_);
  }
  for (int i = 0; i < this->lats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64NoTag(
      this->lats(i), output);
  }

  // repeated sint64 lons = 3 [packed = true];
  if (this->lons_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_lons_cached_byte_size_);
  }
  for (int i = 0; i < this->lons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64NoTag(
      this->lons(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeltaCoords::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated sint64 ids = 1 [packed = true];
  if (this->ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64NoTagToArray(this->ids(i), target);
  }

  // repeated sint64 lats = 2 [packed = true];
  if (this->lats_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _lats_cached_byte_size_, target);
  }
  for (int i = 0; i < this->lats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64NoTagToArray(this->lats(i), target);
  }

  // repeated sint64 lons = 3 [packed = true];
  if (this->lons_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _lons_cached_byte_size_, target);
  }
  for (int i = 0; i < this->lons_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64NoTagToArray(this->lons(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeltaCoords::ByteSize() const {
  int total_size = 0;

  // repeated sint64 ids = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sint64 lats = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->lats_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->lats(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _lats_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sint64 lons = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->lons_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->lons(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _lons_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeltaCoords::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeltaCoords* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeltaCoords*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeltaCoords::MergeFrom(const DeltaCoords& from) {
  GOOGLE_CHECK_NE(&from, this);
  ids_.MergeFrom(from.ids_);
  lats_.MergeFrom(from.lats_);
  lons_.MergeFrom(from.lons_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeltaCoords::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeltaCoords::CopyFrom(const DeltaCoords& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeltaCoords::IsInitialized() const {

  return true;
}

void DeltaCoords::Swap(DeltaCoords* other) {
  if (other != this) {
    ids_.Swap(&other->ids_);
    lats_.Swap(&other->lats_);
    lons_.Swap(&other->lons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeltaCoords::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeltaCoords_descriptor_;
  metadata.reflection = DeltaCoords_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeltaList::kIdsFieldNumber;
#endif  // !_MSC_VER

DeltaList::DeltaList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeltaList::InitAsDefaultInstance() {
}

DeltaList::DeltaList(const DeltaList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeltaList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeltaList::~DeltaList() {
  SharedDtor();
}

void DeltaList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeltaList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeltaList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeltaList_descriptor_;
}

const DeltaList& DeltaList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_internal_2eproto();
  return *default_instance_;
}

DeltaList* DeltaList::default_instance_ = NULL;

DeltaList* DeltaList::New() const {
  return new DeltaList;
}

void DeltaList::Clear() {
  ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeltaList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated sint64 ids = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 10, input, this->mutable_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeltaList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated sint64 ids = 1 [packed = true];
  if (this->ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64NoTag(
      this->ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeltaList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated sint64 ids = 1 [packed = true];
  if (this->ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64NoTagToArray(this->ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeltaList::ByteSize() const {
  int total_size = 0;

  // repeated sint64 ids = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeltaList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeltaList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeltaList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeltaList::MergeFrom(const DeltaList& from) {
  GOOGLE_CHECK_NE(&from, this);
  ids_.MergeFrom(from.ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeltaList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeltaList::CopyFrom(const DeltaList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeltaList::IsInitialized() const {

  return true;
}

void DeltaList::Swap(DeltaList* other) {
  if (other != this) {
    ids_.Swap(&other->ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeltaList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeltaList_descriptor_;
  metadata.reflection = DeltaList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace internal
}  // namespace cache
}  // namespace imposm

// @@protoc_insertion_point(global_scope)
